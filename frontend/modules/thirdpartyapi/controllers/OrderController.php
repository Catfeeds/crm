<?php
/**
 * Created by PhpStorm.
 * User: liujinxing
 * Date: 2017/6/16
 * Time: 10:52
 */

namespace frontend\modules\thirdpartyapi\controllers;

use common\logic\CheApi;
use common\models\PutTheCar;
use yii;
use common\common\PublicMethod;
use common\logic\CompanyUserCenter;
use common\logic\NoticeTemplet;
use common\models\Clue;
use common\models\Customer;
use common\models\Order;
use common\logic\JxcApi;
use common\models\Intention;
use common\models\OrganizationalStructure;
use common\models\Talk;
use common\models\User;
use yii\helpers\Json;

/**
 * Class OrderController 第三方有关电商下单的一些接口处理(包括天猫下单)
 * @package frontend\modules\thirdpartyapi\controllers
 */
class OrderController extends \common\controllers\ApiController
{

    /**
     * 是否需要验证token 由于 java 那边处理加密存在问题，设置为false
     * @var bool
     */
    private $isValidateSign = true;

    /**
     * 默认使用顾问信息
     * @var array
     */
    private $arrConsultant = [];

    /**
     * 默认使用的门店信息
     * @var array
     */
    private $arrShop = [];

    /**
     * @var int 定义信息来源 来源 为 网络
     */
    private $intSourceId = 16;

    /**
     * @var int 定义渠道来源 来源 为 网站预订
     */
    private $intInputType = 1;


    /**
     * 错误码对应错误信息
     * @var array
     */
    public $errCode = [
        0 => 'success',
        1 => '请求参数为空',
        2 => '请求参数存在问题',
        3 => '签名错误',
        4 => '用户ID错误',
        5 => '用户不存在',
        6 => '处理失败',
        7 => '顾问彭青信息不存在',
        10 => '出现未知错误',

        20 => '订单不存在',
        21 => '订单处理失败',
        22 => '线索ID对应的线索信息不存在',
    ];

    /**
     * @var array 定义订单可以批量赋值的key
     */
    private $orderAttributes = [
        'color_configure',
        'deposit',
        'buy_type',
        'loan_period',
        'predict_car_delivery_time',
        'car_delivery_time',
        'delivery_price',
        'discount_price',
        'give',
        'is_insurance',
        'insurance_time',
        'frame_number',
        'engine_code',
        'car_number',
        'is_add',
        'add_content',
        'che_car_id',
        'che_car_name',
    ];

    /**
     * 初始化处理，默认赋值顾问和门店信息
     */
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->arrConsultant = Yii::$app->params['arrConsultant'];
        $this->arrShop = Yii::$app->params['arrShop'];
    }

    /**
     * 请求初始化方法 初始化请求参数
     * @param \yii\base\Action $action
     * @return bool
     */
    public function beforeAction($action)
    {
        $this->mixRequest = \Yii::$app->request->post();
        return parent::beforeAction($action);
    }

    /**
     * 客户在电商下订单支付成功
     * @desc 客户在电商下单、或者crm下单 支付成功都会推送到该接口
     * @return array
     */
    public function actionSuccess()
    {
        // 验证请求参数
        if ($this->validateRequest($this->mixRequest, [
            'member_id', 'customer_phone', 'customer_name',
            'che_order_id', 'intention_id', 'intention_des', 'sign'
        ], $this->isValidateSign)
        ) {
            // 验证是否存在客户ID
            $intMemberId = (int)$this->mixRequest['member_id'];
            $strPhone = trim($this->mixRequest['customer_phone']);
            $this->json['code'] = 4;
            $intTime = time();
            if ($intMemberId && $strPhone) {
                // 查询订单是否存在(不重复处理)
                $order = Order::findOne(['che_order_id' => $this->mixRequest['che_order_id']]);
                if ($order) {
                    // 订单在电商下单重复推送，不处理 order_type == 3
                    if ($order->order_type == Order::ORDER_TYPE_E_COMMERCE) {
                        $this->json['code'] = 0;
                    } else {
                        // 需要开启事务处理
                        $transaction = \Yii::$app->db->beginTransaction();
                        $isSubmit = true;
                        try {

                            // 其他订单信息 (由请求方提供) 更新部分信息
                            $order->attributes = $this->handleOrderAssignment($this->mixRequest);

                            // 修改订单的状态和财务到账时间
                            $order->status = 3;
                            $order->cai_wu_dao_zhang_time = $intTime;

                            // 修改成功处理
                            if ($order->save(false)) {
                                $this->json['code'] = 0;

                                // 查询订单对应的线索ID
                                $clue = Clue::findOne($order->clue_id);
                                if ($clue) {
                                    $clue->intention_level_id = 6;
                                    $intention = Intention::findOne(6);
                                    $clue->intention_level_des = $intention ? $intention->name : '';

                                    // 修改订单成功，修改线索信息失败，需要回滚事务
                                    if (!$clue->save()) {
                                        $isSubmit = false;
                                        $this->error['message'] = '修改线索意向状态失败';
                                    }

                                    // 新门店ID
                                    $intNewShopId = null;

                                    // 判断传递了提车门店信息并且订车门店和提车门店信息不一致，添加提车任务门店信息
                                    if (!empty($this->mixRequest['shop_id']) && $order->shop_id != $this->mixRequest['shop_id']) {
                                        // 没有保存失败记录日志
                                        if (PutTheCar::addMentionTheTask(
                                            $clue,
                                            $order,
                                            $this->mixRequest['shop_id'])
                                        ) {
                                            $intNewShopId = (int)$this->mixRequest['shop_id'];
                                        } else {
                                            $this->writeLogs([
                                                'message' => '添加提车任务失败',
                                            ], '-error.log');
                                        }
                                    } else {
                                        // 通知电商订车和提车顾问信息
                                        (new CheApi())->noticeUpdateStoreSale(
                                            $order->che_order_id,
                                            $clue->salesman_id,
                                            $clue->salesman_id,
                                            $clue->shop_id,
                                            $clue->shop_id
                                        );
                                    }

                                    // 向ERP发送请求
                                    $this->sendErpRequest($clue, $order, $intNewShopId);
                                } else {
                                    $this->error['error'] = 'clue is Null';
                                }

                            } else {
                                $this->json['code'] = 10;
                            }

                            // 处理事务提交
                            if ($isSubmit) {
                                $transaction->commit();
                            } else {
                                $transaction->rollBack();
                            }
                        } catch (\Exception $e) {
                            $transaction->rollBack();
                            $this->error['error'] = $e->getMessage();
                        }
                    }
                } else {

                    // 查询验证用户是否存在(不存在新增这个客户)
                    $customer = Customer::findByMemberIdOrInsert($intMemberId);
                    $this->json['code'] = 5;

                    if ($customer) {
                        /* @var $customer \common\models\Customer */

                        // 需要开启事务处理
                        $transaction = \Yii::$app->db->beginTransaction();
                        $clue = $order = null;

                        // 定义是否需要添加 提车任务
                        $isCreateMentionTheTask = false;

                        try {
                            $isTrue = false;
                            /**
                             * 先查询线索(这个客户的不是占败并且状态是 线索、意向、订车客户)
                             *
                             * edited by liujx 2017-07-31 修复一条线索对应多个订单问题 start:
                             *
                             * 现在需求是，一条线索对应一个订单，不然多个订单对应一条线索存在问题：
                             *
                             * --- 线索处理方式: 查询线索信息，将线索转为订车,生成订单
                             * --- 意向订车处理方式：生成一条新的线索，生成订单
                             */

                            // 优先处理线索状态的客户情况
                            $clue = Clue::find()
                                ->where([
                                    'and',
                                    ['=', 'customer_id', $customer->id],
                                    ['=', 'is_fail', 0],
                                    ['=', 'status', 0],
                                ])
                                ->orderBy('id DESC')
                                ->one();

                            // 不存在才去查询 意向和订车的情况
                            if (!$clue) {

                                // 处理存在意向和订车状态的情况，这个情况需要根据之前的线索信息，生成新的线索（目的保证该客户在原来的顾问身上）
                                $oldClue =  Clue::find()
                                    ->where([
                                        'and',
                                        ['=', 'customer_id', $customer->id],
                                        ['=', 'is_fail', 0],
                                        ['in', 'status', [1, 2]],
                                    ])
                                    ->orderBy('id DESC')
                                    ->one();

                                // 存在意向和订车客户，生成一条新的线索
                                if ($oldClue) {
                                    /* @var $oldClue \common\models\Clue */
                                    $clue = new Clue();

                                    // 客户信息
                                    $clue->customer_id = $customer->id;
                                    $clue->customer_phone = $customer->phone;
                                    $clue->customer_name = $customer->name;

                                    // 信息来源和渠道来源信息
                                    $clue->clue_source = $this->intSourceId;
                                    $clue->clue_input_type = $this->intInputType;

                                    // 车系信息
                                    $clue->intention_id = (int)$this->mixRequest['intention_id'];
                                    $clue->intention_des = $this->mixRequest['intention_des'];

                                    // 其他信息
                                    $clue->create_time = $intTime;
                                    $clue->assign_time = $clue->create_time;
                                    $clue->is_assign = 1;
                                    $clue->create_card_time = $clue->create_time;
                                    $clue->create_person_name = '个人注册';
                                    $clue->who_assign_name = '系统';
                                    $clue->who_assign_id = 0;
                                    $clue->create_type = 4;
                                    $clue->status = 2;

                                    // 顾问信息(使用原来顾问信息)
                                    $clue->salesman_id = $oldClue->salesman_id;
                                    $clue->salesman_name = $oldClue->salesman_name;

                                    // 门店信息(使用原顾问门店信息)
                                    $clue->shop_id = $oldClue->shop_id;
                                    $clue->shop_name = $oldClue->shop_name;

                                    // 意向等级
                                    $clue->intention_level_id = 6;
                                    $intention = Intention::findOne(6);
                                    $clue->intention_level_des = $intention ? $intention->name : '';

                                    // 记录下日志方便查看
                                    $this->writeLogs([
                                        'message' => '使用的原顾问信息',
                                        'clue' => $clue->toArray(),
                                        'old_clue' => $oldClue->toArray()
                                    ]);
                                }
                            }

                            // 订车等级，默认为空（客户之前没有线索）
                            $strIntentionLevelDes = '';

                            // CRM 存在这个客户信息了
                            if ($clue) {
                                /* @var $clue \common\models\Clue */

                                /**
                                 * edited by liujx 2017-07-06 逻辑判断修改  start :
                                 */
                                // 设置为分配
                                $clue->is_assign = 1;

                                // 先判断是否无顾问的情况(处理门店和顾问信息的写入)
                                if (empty($clue->salesman_id)) {
                                    // 判断有无归属门店
                                    if (empty($clue->shop_id)) {
                                        // 没有门店信息 判断处理是否使用传递的顾问ID和门店信息
                                        $this->handleShopOrSalesman();

                                        // 顾问信息
                                        $clue->salesman_id = $this->arrConsultant['id'];
                                        $clue->salesman_name = $this->arrConsultant['name'];

                                        // 门店信息
                                        $clue->shop_id = $this->arrShop['id'];
                                        $clue->shop_name = $this->arrShop['name'];
                                    } else {
                                        // 有门店信息，在这个门店里面随机一个顾问
                                        $salesman = OrganizationalStructure::getRandomUser($clue->shop_id);
                                        if ($salesman) {
                                            // 顾问信息
                                            $clue->salesman_id = $salesman['id'];
                                            $clue->salesman_name = $salesman['name'];
                                        } else {
                                            $this->writeLogs([
                                                'shop_id' => $clue->shop_id,
                                                'error' => '这个门店没有顾问信息'
                                            ], '-error');
                                        }
                                    }

                                    // 分配时间和分配人信息
                                    $clue->assign_time = $intTime;
                                    $clue->who_assign_id = 0;
                                    $clue->who_assign_name = '系统';
                                    if (empty($clue->create_person_name)) $clue->create_person_name = '个人注册';
                                }

                                // 该段代码为了保证数据的有效性的处理 --- start :
                                // 建卡时间
                                if (empty($clue->create_card_time)) $clue->create_card_time = $intTime;

                                // 信息来源
                                if (empty($clue->clue_source)) {
                                    $clue->clue_source = $this->intSourceId;
                                }

                                // 渠道来源
                                if (empty($clue->clue_input_type)) {
                                    $clue->clue_input_type = $this->intInputType;
                                }

                                // 车系信息
                                if (empty($clue->intention_id)) {
                                    $clue->intention_id = (int)$this->mixRequest['intention_id'];
                                    $clue->intention_des = $this->mixRequest['intention_des'];
                                }

                                // --- end;

                                // end;

                                // 修改状态为订车
                                $clue->status = 2;

                                $strIntentionLevelDes = $clue->intention_level_des;

                                // 修改意向等级
                                $clue->intention_level_id = 6;
                                $intention = Intention::findOne(6);
                                $clue->intention_level_des = $intention ? $intention->name : '';

                                // 需要处理判断处理提车任务
                                $isCreateMentionTheTask = true;
                            } else {

                                // 判断处理是否使用传递的顾问ID和门店信息
                                $this->handleShopOrSalesman();

                                // 开始生成线索信息
                                $clue = new Clue();

                                // 客户信息
                                $clue->customer_id = $customer->id;
                                $clue->customer_phone = $customer->phone;
                                $clue->customer_name = $customer->name;

                                // 信息来源和渠道来源信息
                                $clue->clue_source = $this->intSourceId;
                                $clue->clue_input_type = $this->intInputType;

                                // 车系信息
                                $clue->intention_id = (int)$this->mixRequest['intention_id'];
                                $clue->intention_des = $this->mixRequest['intention_des'];

                                // 其他信息
                                $clue->create_time = $intTime;
                                $clue->assign_time = $clue->create_time;
                                $clue->is_assign = 1;
                                $clue->create_card_time = $clue->create_time;
                                $clue->create_person_name = '个人注册';
                                $clue->who_assign_name = '系统';
                                $clue->who_assign_id = 0;
                                $clue->create_type = 4;
                                $clue->status = 2;

                                // 顾问信息
                                $clue->salesman_id = $this->arrConsultant['id'];
                                $clue->salesman_name = $this->arrConsultant['name'];

                                // 门店信息
                                $clue->shop_id = $this->arrShop['id'];
                                $clue->shop_name = $this->arrShop['name'];


                                // 意向等级
                                $clue->intention_level_id = 6;
                                $intention = Intention::findOne(6);
                                $clue->intention_level_des = $intention ? $intention->name : '';
                            }

                            if ($clue->save(false)) {
                                // 生成订单信息
                                $order = new Order();

                                // 其他订单信息 (由请求方提供) 更新部分信息
                                $order->attributes = $this->handleOrderAssignment($this->mixRequest);

                                $order->order_id = Order::createOrderId();

                                // 使用 线索信息
                                $order->clue_id = $clue->id;
                                $order->salesman_id = $clue->salesman_id;
                                $order->shop_id = $clue->shop_id;

                                $order->che_order_id = $this->mixRequest['che_order_id'];
                                $order->customer_id = $customer->id;
                                $order->create_time = $intTime;

                                $order->status = 3;

                                $order->cai_wu_dao_zhang_time = $intTime;

                                // 车系信息
                                $order->car_type_name = $this->mixRequest['intention_des'];
                                $order->car_type_id = $this->mixRequest['intention_id'];

                                // 客户信息
                                $order->car_owner_name = $this->mixRequest['customer_name'];
                                $order->car_owner_phone = $this->mixRequest['customer_phone'];

                                // 车型信息
                                $order->che_car_id = isset($this->mixRequest['car_type_id']) ? $this->mixRequest['car_type_id'] : 0;
                                $order->che_car_name = isset($this->mixRequest['car_type_name']) ? $this->mixRequest['car_type_name'] : '';
                                $order->order_type = 3;

                                // 判断是否保存成功
                                if ($order->save(false)) {
                                    $isTrue = true;
                                }
                            }

                            // 最终处理成功提交这个事物
                            if ($isTrue) {
                                $transaction->commit();
                            } else {
                                $this->json['code'] = 6;
                                $transaction->rollBack();
                            }
                        } catch (\Exception $e) {
                            $transaction->rollBack();
                            $isTrue = $isHave = false;
                            $this->json['code'] = 10;
                            $this->error = ['code' => $e->getCode(), 'message' => $e->getMessage()];
                        }

                        // 判断是否成功
                        if ($isTrue) {
                            $this->json['code'] = 0;

                            // 请求EPR接口
                            if ($clue && $order) {
                                // 都需要推送消息
                                $content = "客户姓名：{$clue->customer_name}\n客户电话：{$clue->customer_phone}\n预定车型：{$this->mixRequest['intention_des']}\n";
                                (new NoticeTemplet())->sendNoticeByType(
                                    'orderSuccess',
                                    0,
                                    (string)$clue->salesman_id,
                                    [],
                                    'client_order_success',
                                    [
                                    'content' => $content,
                                    'notice_param' => json_encode(['clue_id' => $clue->id], 320),
                                ]);

                                $intNewShopId = null;
                                /**
                                 * edited by liujx 2017-07-25 添加判断下单门店和提车门店是否一致的情况 start:
                                 *
                                 * 只有这个客户是旧客户、并且下单门店和提车门店不一致的清情况才处理
                                 */
                                if (
                                    $isCreateMentionTheTask === true && // 不是新客户
                                    !empty($this->mixRequest['shop_id']) &&  // 传递了提车门店
                                    $order->shop_id != $this->mixRequest['shop_id'] // 订车门店和提车门店不一致
                                ) {
                                    // 没有保存失败记录日志
                                    if (PutTheCar::addMentionTheTask($clue, $order, $this->mixRequest['shop_id'])) {
                                        $intNewShopId = (int)$this->mixRequest['shop_id'];
                                    } else {
                                        $this->writeLogs([
                                            'message' => '添加提车任务失败',
                                        ], '-error.log');
                                    }
                                } else {
                                    // 通知电商订车和提车顾问信息
                                    (new CheApi())->noticeUpdateStoreSale(
                                        $order->che_order_id,
                                        $clue->salesman_id,
                                        $clue->salesman_id,
                                        $clue->shop_id,
                                        $clue->shop_id
                                    );
                                }

                                // end;

                                // 向ERP发送请求
                                $this->sendErpRequest($clue, $order, $intNewShopId);

                                /**
                                 * edited by liujx 2017-07-12 需求修改，电商下单成功，需要添加商谈任务 start :
                                 */
                                $talk = new Talk();
                                $talk->castomer_id = $clue->customer_id;
                                $talk->clue_id = $clue->id;
                                $talk->salesman_id = $clue->salesman_id;
                                $talk->shop_id = $clue->shop_id;
                                $talk->create_time = $intTime;
                                $talk->talk_type = Talk::TALK_TYPE_ORDER_CAR; // 电商下单
                                $talk->order_id = $order->order_id;
                                $talk->talk_date = date('Y-m-d');
                                $talk->start_time = $intTime;
                                $strIntentionLevelDes = empty($strIntentionLevelDes) ? '' : $strIntentionLevelDes.' --> ';
                                // 预计交车时间
                                $strDelivery = $order->predict_car_delivery_time ? date('Y-m-d H:i:s', $order->predict_car_delivery_time) : '--';
                                // 定金
                                $floDeposit = $order->deposit ? $order->deposit : '--';
                                $talk->add_infomation = Json::encode([
                                    '下单时间' => date('Y-m-d H:i:s', $order->create_time),
                                    '意向等级' => $strIntentionLevelDes . $clue->intention_level_des,
                                    '定金' =>  $floDeposit,
                                    '预计交车时间' => $strDelivery,
                                ]);
                                $talk->is_intention_change = 1;

                                if (!$talk->save()) {
                                    // 添加商谈任务失败记录日志
                                    $this->writeLogs([
                                        'clue' => $clue->toArray(),
                                        'order' => $order->toArray(),
                                        'error' => [
                                            'message' => '添加商谈记录失败',
                                            'error' => $talk->getErrors(),
                                        ],
                                    ], '-error');
                                }
                                // end;
                            }
                        }
                    }
                }
            }

        }

        // 返回数据
        return $this->returnJson();
    }

    /**
     * 客户在电商下订单支付失败
     *
     * @desc 现在是 在电商下单超时和 H5下单失败都走这个接口 时间 2017-06-28
     * @return array
     */
    public function actionFail()
    {
        // 存在车城订单号，说明走的是 H5 下单处理失败的情况
        if (isset($this->mixRequest['che_order_id'])) {
            // 验证请求参数
            if ($this->validateRequest($this->mixRequest, ['che_order_id', 'sign'])) {
                // 查询订单号是否存在
                $order = Order::findOne(['che_order_id' => $this->mixRequest['che_order_id']]);
                $this->json['code'] = 20;
                if ($order) {

                    $transaction = \Yii::$app->db->beginTransaction();
                    $isSubmit = true;
                    try {
                        // 1、先将订单状态改为失败
                        $order->status = 4;
                        $order->save(false);

                        // 2、需要将线索状态改为意向，并且意向等级改为 5
                        $clue = Clue::findOne($order->clue_id);
                        if ($clue) {
                            $clue->status = 1;

                            // 意向等级
                            $clue->intention_level_id = 5;
                            $intention = Intention::findOne(5);
                            $clue->intention_level_des = $intention ? $intention->name : '';

                            if (!$clue->save()) {
                                $isSubmit = false;
                                $this->error['error'] = $clue->getErrors();
                            }
                        } else {
                            // 记录错误日志
                            $this->error['error'] = [
                                'error' => '订单对应的线索信息不存在',
                                'order' => $order->toArray()
                            ];
                        }

                        if ($isSubmit) {
                            $transaction->commit();
                            if ($clue) {
                                // 推送消息修改
                                (new NoticeTemplet())->sendNoticeByType('crmOrderFail', 0, (string)$clue->salesman_id, [], 'client_order_fail', [
                                    'content' => "客户姓名：{$clue->customer_name}\n客户电话：{$clue->customer_phone}\n预定车型：{$clue->intention_des}\n",
                                    'notice_param' => json_encode(['clue_id' => $clue->id], 320),
                                ]);
                            }
                        } else {
                            $transaction->rollBack();
                        }

                    } catch (\Exception $e) {
                        $transaction->rollBack();
                        $this->error['message'] = $e->getMessage();
                    }

                    $this->json['code'] = 0;
                }
            }

        // 这里走的是 电商下单超时的情况
        } else {
            // 验证请求参数
            if ($this->validateRequest($this->mixRequest,
                ['member_id', 'customer_phone', 'intention_id', 'intention_des', 'sign'],
                $this->isValidateSign)) {

                // 验证是否存在客户ID
                $intMemberId = (int)$this->mixRequest['member_id'];
                $this->json['code'] = 4;
                if ($intMemberId) {

                    // 查询验证用户是否存在(不存在新增这个客户)
                    $customer = Customer::findByMemberIdOrInsert($intMemberId);

                    // 用户不存在
                    $this->json['code'] = 5;
                    if ($customer) {

                        /* @var $customer \common\models\Customer */

                        /**
                         * edited by liujx 2017-07-06 start :
                         *  --- (之前的逻辑) 先查询线索(这个客户的不是占败并且状态是意向、订车客户) 修改线索状态为1 意向等级为 5
                         *  --- (现在的逻辑) 只有这个客户有线索信息不管什么状态，不处理
                         */
                        $clue = Clue::findOne(['customer_id' => $customer->id]);
                        if ($clue) {
                            $this->json['code'] = 0;
                        } else {
                            // 判断处理是否使用传递的顾问ID和门店信息
                            $this->handleShopOrSalesman();

                            // 开始生成线索信息
                            $clue = new Clue();

                            // 客户信息
                            $clue->customer_id = $customer->id;
                            $clue->customer_phone = $customer->phone;
                            $clue->customer_name = $customer->name;

                            // 信息来源和渠道来源信息
                            $clue->clue_source = $this->intSourceId;
                            $clue->clue_input_type = $this->intInputType;

                            // 车系信息
                            $clue->intention_id = (int)$this->mixRequest['intention_id'];
                            $clue->intention_des = $this->mixRequest['intention_des'];

                            // 其他信息
                            $clue->create_time = time();
                            $clue->assign_time = $clue->create_time;
                            $clue->is_assign = 1;
                            $clue->create_card_time = $clue->create_time;
                            $clue->create_person_name = '个人注册';
                            $clue->who_assign_name = '系统';
                            $clue->who_assign_id = 0;
                            $clue->create_type = 5;
                            $clue->status = 1;

                            // 顾问信息
                            $clue->salesman_id = $this->arrConsultant['id'];
                            $clue->salesman_name = $this->arrConsultant['name'];

                            // 门店信息
                            $clue->shop_id = $this->arrShop['id'];
                            $clue->shop_name = $this->arrShop['name'];

                            // 意向等级
                            $clue->intention_level_id = 5;
                            $intention = Intention::findOne(5);
                            $clue->intention_level_des = $intention ? $intention->name : '';

                            // 判断是否成功
                            if ($clue->save(false)) {
                                $this->json['code'] = 0;

                                // 推送消息修改
                                (new NoticeTemplet())->sendNoticeByType('orderFail', 0, (string)$clue->salesman_id, [], 'client_order_fail', [
                                    'content' => "客户姓名：{$clue->customer_name}\n客户电话：{$clue->customer_phone}\n预定车型：{$this->mixRequest['intention_des']}\n",
                                    'notice_param' => json_encode(['clue_id' => $clue->id], 320),
                                ]);

                            }
                        }
                    }
                }
            }
        }

        // 返回数据
        return $this->returnJson();
    }

    /**
     * 客户在CRM 订车跳转到 H5 页面下单后回调接口
     * @return array
     */
    public function actionUpdate()
    {
        // 验证请求参数
        if (isset($this->mixRequest['order_type']) && $this->validateRequest($this->mixRequest, [
            'order_id', 'clue_id', 'che_order_id', 'car_type_id', 'car_type_name', 'car_owner_name', 'car_owner_phone', 'qr_url', 'sign'
        ], $this->isValidateSign, $this->mixRequest['order_type'])) {
            // 查询订单信息
            $this->json['code'] = 22;
            // 先查线索信息
            $clue = Clue::findOne((int)$this->mixRequest['clue_id']);
            if ($clue) {

                // 订单存在不重复处理
                $order = Order::findOne(['che_order_id' => $this->mixRequest['che_order_id']]);
                if ($order) {
                    $this->json['code'] = 0;
                } else {

                    // 开启事物处理
                    $transaction = \Yii::$app->db->beginTransaction();

                    // 是否处理成功
                    $isTrue = false;

                    try {

                        // 修改线索状态为订车客户
                        $clue->status = 2;
                        $intention_des = null;
                        $intention_des = $clue->intention_level_des;
                        //增加意向等级
                        $clue->intention_level_id = 6;
                        $intention = Intention::findOne(6);
                        $clue->intention_level_des = $intention ? $intention->name : '';

                        if ($clue->save(false)) {
                            // 生成订单信息
                            $order = new Order();

                            $params = $this->mixRequest;
                            // 删除多余参数
                            unset($params['sign'], $params['clue_id']);

                            // 进行批量赋值
                            $order->attributes = $params;

                            // 写入可以确定参数信息
                            $order->order_id = $this->mixRequest['order_id'];
                            $order->clue_id = $clue->id;
                            $order->che_order_id = $this->mixRequest['che_order_id'];
                            $order->customer_id = $clue->customer_id;
                            $order->create_time = time();
                            $order->shop_id = $clue->shop_id;
                            $order->status = 1;
                            $order->salesman_id = $clue->salesman_id;
                            $order->order_type = (int)$this->mixRequest['order_type'];

                            if ($order->save(false)) {
                                $isTrue = true;
                            }
                        }

                        // 处理成功返回提交事物
                        if ($isTrue) {
                            \Yii::$app->cache->set('intention_des'.$clue->id,$intention_des);
                            $transaction->commit();
                        } else {
                            $this->json['code'] = 10;
                            $transaction->rollBack();
                        }
                    } catch (\Exception $e) {
                        $transaction->rollBack();
                        $this->json['code'] = 10;
                        $this->error = ['code' => $e->getCode(), 'message' => $e->getMessage()];
                    }

                    // 确认返回
                    if ($isTrue) {
                        $this->json['code'] = 0;
                    }
                }
            }
        }

        // 返回数据
        return $this->returnJson();
    }

    /**
     * 向erp 发送请求
     * @param  object $clue 线索信息
     * @param  object $order 订单信息
     * @param  null|int $shopId 提车门店ID 相同不穿
     * @return mixed
     */
    private function sendErpRequest($clue, $order, $shopId = null)
    {
        $objApi = new JxcApi();
        /**
         * edited by liujx 2017-7-27 修改请求参数 start:
         *
         * 现在添加了提车门店和提车顾问，第一次请求，因为不知道分配的顾问，所以第一个使用下单信息提交
         * 在分配认领后再次请求，erp 会覆盖之前的交车顾问信息
         */
        // 日志信息
        $arrLogs = [
            'url' => rtrim($objApi->url, '/') . '/api/sale/updateSellerId',
            'request' => [
                'clueNo' => $order->order_id,
                'onlineSaleNo' => $order->che_order_id,
                'sellerId' => $clue->salesman_id, // 下单顾问
                'storeId' => $clue->shop_id,      // 下单门店
            ],

            'response' => '',
        ];

        if ($shopId === null) {
            $arrLogs['request']['delSellerId'] = $clue->salesman_id; // 交车顾问
            $arrLogs['request']['delStoreId'] = $clue->shop_id;      // 交车门店
        } else {
            $arrLogs['request']['delStoreId'] = $shopId;      // 交车门店
        }

        // end;

        $this->token = '_tk'. $objApi->b_token;
        $arrLogs['request']['sign'] = $this->sign($arrLogs['request']);
        // 执行请求
        try {
            $arrLogs['response'] = PublicMethod::http_post($arrLogs['url'], $arrLogs['request'], [CURLOPT_TIMEOUT => 30]);
        } catch (\Exception $e) {
            $arrLogs['error'] = $e->getMessage();
        }

        // 记录日志
        $this->writeLogs($arrLogs, '-erp');

        // 返回处理
        return $arrLogs['response'];
    }

    /**
     * 处理需求变更，接口传递顾问ID和门店ID的处理
     */
    private function handleShopOrSalesman()
    {
        // 判断是否存在门店信息(因为顾问ID可以传，可以不传， 有顾问ID，必须存在门店ID)
        if (!empty($this->mixRequest['shop_id'])) {
            // 门店信息
            $shop = OrganizationalStructure::findOne([
                'id' => $this->mixRequest['shop_id'],
                'is_delete' => 0
            ]);
            if ($shop) {
                // 判断是否存在顾问ID(存在使用这个顾问的信息)
                if (!empty($this->mixRequest['salesman_id'])) {
                    // 查询这个顾问信息是否存在
                    $salesman = User::findOne([
                        'id' => $this->mixRequest['salesman_id'],
                        'is_delete' => 0
                    ]);
                    if ($salesman) {
                        // 修改自己的顾问信息
                        $this->arrConsultant = [
                            'id' => $salesman->id,
                            'name' => $salesman->name
                        ];

                        // 修改门店信息
                        $this->arrShop = [
                            'id' => $shop->id,
                            'name' => $shop->name
                        ];

                        // 获取这个门店的所有顾问信息，并且判断这个门店是否有这个顾问信息
                        $common = new CompanyUserCenter();
                        $users = $common->getShopSales($shop->id);
                        if ($users) {
                            // 获取到这个门店所以顾问的ID
                            $arrUserIds = array_column($users, 'id');
                        } else {
                            $arrUserIds = [];
                        }

                        // 判断顾问门店信息是否一致
                        if (!in_array($salesman->id, $arrUserIds)) {
                            $this->writeLogs([
                                'salesman' => $salesman->toArray(),
                                'shop' => $shop->toArray(),
                                'error' => '顾问的门店信息和传递的门店信息不一致'
                            ], '-error');
                        }
                    } else {
                        // 顾问离职，需要随机获取一个顾问信息
                        $this->randomConsultant($shop);

                        // 这种情况记录下日志，方便查询错误
                        $this->writeLogs([
                            'salesman_id' => $this->mixRequest['salesman_id'],
                            'error' => '顾问离职或者不存在，在门店随机了一个顾问',
                        ], '-error');
                    }
                } else {
                    // 在门店中随机一个顾问，没有的情况下记录日志
                    $this->randomConsultant($shop);
                }
            }
        }
    }

    /**
     * 在门店中随机一个顾问，没有的情况下记录日志
     *
     * @param \common\models\OrganizationalStructure $shop
     */
    private function randomConsultant($shop)
    {
        // 随机获取一个顾问
        $user = OrganizationalStructure::getRandomUser($shop->id);
        if ($user) {
            // 修改顾问信息
            $this->arrConsultant = [
                'id' => $user['id'],
                'name' => $user['name']
            ];

            // 修改门店信息
            $this->arrShop = [
                'id' => $shop->id,
                'name' => $shop->name
            ];
        } else {
            $this->writeLogs([
                'shop_id' => $shop->id,
                'error' => '这个门店没有顾问哦'
            ], '-error');
        }
    }

    /**
     * 处理订单赋值问题
     * @param array $params 请求的值
     * @return array
     */
    private function handleOrderAssignment($params)
    {
        $update = [];
        foreach ($params as $key => $value) {
            if (in_array($key, $this->orderAttributes)) {
                $update[$key] = $value;
            }
        }

        return $update;
    }
}