<?php
/**
 * Created by PhpStorm.
 * User: xjun
 * Date: 2017/3/6
 * Time: 16:38
 */
namespace frontend\modules\glsb\controllers;

use common\helpers\Helper;
use yii\rest\Controller;
use yii;

/**
 * 基础控制器
 * Class BaseController
 * @package frontend\modules\glsb\controllers
 */
class BaseController extends Controller
{
    /**
     * @var string 定义版本号
     */
    protected $version = 'v1.0';

    /**
     * 缓存用户基本信息
     * @var array 
     */
    public $userinfo = [];

    /**
     * @var string 定义请求的参数
     */
    public $mixPublicRequest = '';

    /**
     * @var string 定义请求的参数
     */
    public $mixRequest = '';

//    public $publicData = null;
//    public $privateData = null;
    //所有接口入口,负责解析接收到的参数
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $request = Yii::$app->request;
        $this->mixPublicRequest = $request->post('r');
        $this->mixRequest = $request->post('p');
    }

    
    /**
     * @param \yii\base\Action $action
     * @return bool
     */
    public function beforeAction($action)
    {
        $rtn = parent::beforeAction($action);
        if($rtn)//登录校验成功的，获取登录信息初始化到成员变量userinfo中
        {
            $user = \Yii::$app->user->identity;
            if($user)
            {
                //不能使用user对象中的access_token的值，应为有可能用户在其他地方登陆刷新过该值，所以需要用客户端传过来的
                $rData = json_decode(\yii::$app->request->post('r'), true);
                $accessToken = isset($rData['access_token']) ? $rData['access_token'] : $user->access_token;
                $arrCache = \Yii::$app->cache->get(md5($accessToken) . '_glsb');

                if(is_array($arrCache))
                {
                    //数据权限缓存
                    $arrWhere = [
                        'user_id' => $user->id,
                        'role_id' => $arrCache['role_id'],
                    ];
                    $arrUserRoleOrgIds = [ -1]; 
                    $obj = \common\models\UserRoleOrgids::findOne($arrWhere);
                    if($obj && $obj->org_ids)
                    {
                        $arrUserRoleOrgIds = explode(',', $obj->org_ids);
                    }
                    $this->userinfo = [
                        'role_id' => $arrCache['role_id'],
                        'user_role_info' => $arrUserRoleOrgIds,
                        'shop_id' => $arrCache['shop_id'],
                        'role_level' => \common\models\Role::findOne($arrCache['role_id'])->role_level,
                    ];
                }
            }
        }
        return $rtn;
    }
    

    //返回数据 code + msg + data
    public function echoData($code, $msg, $data = null)
    {
        header("Content-type: application/json");
        $out = [
            'code' => $code,
            'msg' => $msg,
            'data' => $data,
        ];

        /*
         * int 型  intaval
         * string 型   strval
         * [] 空数组有要用null
         */
        // 记录日志返回
        $this->writeLogs([
            'request' => [
                'public' => $this->mixPublicRequest,
                'private' => $this->mixRequest,
            ],
            'response' => $out,
        ]);
        die(json_encode($out, 320));
    }

    /**
     * 通过数组的方式将数据写入日志
     *
     * @param array  $arrParams 需要写入的日志
     * @param string $prefix    文件的后缀名
     */
    public function writeLogs($arrParams = [], $prefix = '')
    {
        // 处理请求参数问题
        $arrLogs = [
            'time' => date('Y-m-d H:i:s'),
            'ip' => Helper::getIpAddress(),
        ];

        if (!empty($arrParams)) $arrLogs = array_merge($arrLogs, $arrParams);
        $arrLogs['version'] = $this->version;

        // 记录日志
        Helper::logs($this->module->id.'/'.$this->id.'/'.date('Ymd').'-'.$this->action->id.$prefix.'.log', $arrLogs);
    }

}